@use 'sass:list';

$appearances: filled, outlined, standard;
$sizes: compact, comfortable, spacious, dense;
$variants: primary, secondary, brand, error, success, warning, light, dark, surface;

.ids-icon-button {
  padding: 0px;
  display: flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;
  border-style: solid;

  &:focus {
    outline-offset: 2px;
    outline: var(--ids-comp-icon-button-focused-outline-size-outline) solid var(--ids-comp-icon-button-focused-outline-color-dark-focused);

    &.ids-icon-button-light {
      outline-color: var(--ids-comp-icon-button-focused-outline-color-light-focused);
    }
  }

  &:active {
    outline: none;
  }

  @each $size in $sizes {
    &.ids-icon-button-#{$size} {
      padding: var(--ids-comp-icon-button-size-padding-y-#{$size}) var(--ids-comp-icon-button-size-padding-x-#{$size});
      width: var(--ids-comp-icon-button-size-width-#{$size});
      height: var(--ids-comp-icon-button-size-height-#{$size});
      border-radius: var(--ids-comp-icon-button-size-border-radius-#{$size});
      border-width: var(--ids-comp-icon-button-size-border-#{$size});

      *[icon] {
        width: var(--ids-comp-icon-button-size-icon-#{$size});
        height: var(--ids-comp-icon-button-size-icon-#{$size});
      }
    }
  }

  @each $appearance in $appearances {
    &.ids-icon-button-#{$appearance} {
      @if $appearance == standard {
        border: none;
      }

      @each $variant in $variants {
        &.ids-icon-button-#{$variant} {
          color: var(--ids-comp-icon-button-#{$appearance}-color-fg-#{$variant}-enabled);
          background: var(--ids-comp-icon-button-#{$appearance}-color-bg-#{$variant}-enabled);

          @if $appearance != standard {
            border-color: var(--ids-comp-icon-button-#{$appearance}-color-border-#{$variant}-enabled);
          }

          &:hover {
            background: var(--ids-comp-icon-button-#{$appearance}-color-bg-#{$variant}-hovered);

            @if $appearance == standard {
              color: var(--ids-comp-icon-button-#{$appearance}-color-fg-#{$variant}-hovered);
            } @else {
              border-color: var(--ids-comp-icon-button-#{$appearance}-color-border-#{$variant}-hovered);
            }
          }

          &:focus {
            background: var(--ids-comp-icon-button-#{$appearance}-color-bg-#{$variant}-focused);
            color: var(--ids-comp-icon-button-#{$appearance}-color-fg-#{$variant}-focused);

            @if $appearance != standard {
              border-color: var(--ids-comp-icon-button-#{$appearance}-color-border-#{$variant}-focused);
            }
          }

          &:active {
            background: var(--ids-comp-icon-button-#{$appearance}-color-bg-#{$variant}-pressed);
            color: var(--ids-comp-icon-button-#{$appearance}-color-fg-#{$variant}-pressed);

            @if $appearance != standard {
              border-color: var(--ids-comp-icon-button-#{$appearance}-color-border-#{$variant}-pressed);
            }
          }

          &:disabled {
            // The following variants do not have a disabled state
            @if list.index(error success warning, $variant) == null {
              background: var(--ids-comp-icon-button-#{$appearance}-color-bg-#{$variant}-disabled);
              color: var(--ids-comp-icon-button-#{$appearance}-color-fg-#{$variant}-disabled);
            }

            @if $appearance != standard {
              border-color: var(--ids-comp-icon-button-#{$appearance}-color-border-#{$variant}-disabled);
            }
          }
        }
      }
    }
  }
}
